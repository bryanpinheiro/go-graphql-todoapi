package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/bryanpinheiro/go-graphql-todoapi/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	todo, err := r.Resolver.CreateTodo(ctx, CreateTodoInput{Title: input.Title})
	if err != nil {
		return nil, err
	}

	// Convert the database model -> *models.Todo to graphql model -> *model.Todo
	convertedTodo := &model.Todo{
		ID:        todo.ID,
		Title:     todo.Title,
		Completed: todo.Completed,
	}

	return convertedTodo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id uint, input model.UpdateTodoInput) (*model.Todo, error) {
	todo, err := r.Resolver.UpdateTodo(ctx, id, UpdateTodoInput{Completed: input.Completed})
	if err != nil {
		return nil, err
	}

	// Convert the database model -> *models.Todo to graphql model -> *model.Todo
	convertedTodo := &model.Todo{
		ID:        todo.ID,
		Title:     todo.Title,
		Completed: todo.Completed,
	}

	return convertedTodo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id uint) (*bool, error) {
	success, err := r.Resolver.DeleteTodo(ctx, id)
	return &success, err
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := r.Resolver.Todos(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the database model -> []*models.Todo
	// to graphql model -> []*model.Todo
	var convertedTodos []*model.Todo
	for _, todo := range todos {
		convertedTodos = append(convertedTodos, &model.Todo{
			ID:        todo.ID,
			Title:     todo.Title,
			Completed: todo.Completed,
		})
	}

	return convertedTodos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id uint) (*model.Todo, error) {
	todo, err := r.Resolver.Todo(ctx, struct{ ID uint }{ID: id})
	if err != nil {
		return nil, err
	}

	// Convert the database model -> *models.Todo to graphql model -> *model.Todo
	convertedTodo := &model.Todo{
		ID:        todo.ID,
		Title:     todo.Title,
		Completed: todo.Completed,
	}

	return convertedTodo, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
